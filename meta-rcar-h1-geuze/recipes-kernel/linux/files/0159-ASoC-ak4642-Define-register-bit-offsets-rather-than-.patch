From 88dd8e3c8040b34b7562932ca75fd3e7aa63b219 Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Thu, 7 Mar 2013 09:51:44 +0000
Subject: [PATCH 159/215] ASoC: ak4642: Define register bit offsets rather
 than masks

This change uses definitions for the register bit positions, rather
than a mask. This allows the code to use the symbol in calls to ASoC
macros, rather than hard coding it again.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 sound/soc/codecs/ak4642.c |   82 ++++++++++++++++++++++++---------------------
 1 file changed, 44 insertions(+), 38 deletions(-)

diff --git a/sound/soc/codecs/ak4642.c b/sound/soc/codecs/ak4642.c
index a5fbdd4..96df0af 100644
--- a/sound/soc/codecs/ak4642.c
+++ b/sound/soc/codecs/ak4642.c
@@ -69,31 +69,37 @@
 #define HP_MS		0x23
 #define SPK_MS		0x24
 
-/* PW_MGMT1*/
-#define PMVCM		(1 << 6) /* VCOM Power Management */
-#define PMMIN		(1 << 5) /* MIN Input Power Management */
-#define PMDAC		(1 << 2) /* DAC Power Management */
-#define PMADL		(1 << 0) /* MIC Amp Lch and ADC Lch Power Management */
-
-/* PW_MGMT2 */
-#define HPMTN		(1 << 6)
-#define PMHPL		(1 << 5)
-#define PMHPR		(1 << 4)
-#define MS		(1 << 3) /* master/slave select */
-#define MCKO		(1 << 1)
-#define PMPLL		(1 << 0)
-
-#define PMHP_MASK	(PMHPL | PMHPR)
+/* PW_MGMT1 (Power Management 1) */
+#define PMVCM		6 /* VCOM Power Management */
+#define PMLO		3 /* Line out mixer Power Management */
+#define PMDAC		2 /* DAC Power Management */
+#define PMADL		0 /* MIC Amp Lch and ADC Lch Power Management */
+#define PMADL_BIT	(1 << PMADL)
+
+/* PW_MGMT2 (Power Management 2) */
+#define HPMTN		6 /* Headphone-Amp Mute Control */
+#define PMHPL		5 /* Headphone-Amp Lch Power Management */
+#define PMHPR		4 /* Headphone-Amp Rch Power Management */
+#define MS		3 /* master/slave select */
+#define MS_BIT		(1 << MS)
+#define MCKO		1
+#define MCKO_BIT	(1 << MCKO)
+#define PMPLL		0
+#define PMPLL_BIT	(1 << PMPLL)
+
+#define PMHP_MASK	((1 << PMHPL) | (1 << PMHPR))
 #define PMHP		PMHP_MASK
 
-/* PW_MGMT3 */
-#define PMADR		(1 << 0) /* MIC L / ADC R Power Management */
+/* PW_MGMT3 (Power Management 3) */
+#define PMADR		0 /* MIC L / ADC R Power Management */
+#define PMADR_BIT	(1 << PMADR)
 
-/* SG_SL1 */
-#define MINS		(1 << 6) /* Switch from MIN to Speaker */
-#define DACL		(1 << 4) /* Switch from DAC to Stereo or Receiver */
-#define PMMP		(1 << 2) /* MPWR pin Power Management */
-#define MGAIN0		(1 << 0) /* MIC amp gain*/
+/* SG_SL1 (Signal Select 1) */
+#define DACL		4 /* Switch from DAC to Stereo or Receiver */
+#define PMMP		2 /* MPWR pin Power Management */
+#define PMMP_BIT	(1 << PMMP)
+#define MGAIN0		0 /* MIC amp gain*/
+#define MGAIN0_BIT	(1 << MGAIN0)
 
 /* TIMER */
 #define ZTM(param)	((param & 0x3) << 4) /* ALC Zoro Crossing TimeOut */
@@ -149,10 +155,10 @@ static const struct snd_kcontrol_new ak4642_snd_controls[] = {
 };
 
 static const struct snd_kcontrol_new ak4642_headphone_control =
-	SOC_DAPM_SINGLE("Switch", PW_MGMT2, 6, 1, 0);
+	SOC_DAPM_SINGLE("Switch", PW_MGMT2, HPMTN, 1, 0);
 
 static const struct snd_kcontrol_new ak4642_lout_mixer_controls[] = {
-	SOC_DAPM_SINGLE("DACL", SG_SL1, 4, 1, 0),
+	SOC_DAPM_SINGLE("DACL", SG_SL1, DACL, 1, 0),
 };
 
 static const struct snd_soc_dapm_widget ak4642_dapm_widgets[] = {
@@ -162,19 +168,19 @@ static const struct snd_soc_dapm_widget ak4642_dapm_widgets[] = {
 	SND_SOC_DAPM_OUTPUT("HPOUTR"),
 	SND_SOC_DAPM_OUTPUT("LINEOUT"),
 
-	SND_SOC_DAPM_PGA("HPL Out", PW_MGMT2, 5, 0, NULL, 0),
-	SND_SOC_DAPM_PGA("HPR Out", PW_MGMT2, 4, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("HPL Out", PW_MGMT2, PMHPL, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("HPR Out", PW_MGMT2, PMHPR, 0, NULL, 0),
 	SND_SOC_DAPM_SWITCH("Headphone Enable", SND_SOC_NOPM, 0, 0,
 			    &ak4642_headphone_control),
 
 	SND_SOC_DAPM_PGA("DACH", MD_CTL4, 0, 0, NULL, 0),
 
-	SND_SOC_DAPM_MIXER("LINEOUT Mixer", PW_MGMT1, 3, 0,
+	SND_SOC_DAPM_MIXER("LINEOUT Mixer", PW_MGMT1, PMLO, 0,
 			   &ak4642_lout_mixer_controls[0],
 			   ARRAY_SIZE(ak4642_lout_mixer_controls)),
 
 	/* DAC */
-	SND_SOC_DAPM_DAC("DAC", "HiFi Playback", PW_MGMT1, 2, 0),
+	SND_SOC_DAPM_DAC("DAC", "HiFi Playback", PW_MGMT1, PMDAC, 0),
 };
 
 static const struct snd_soc_dapm_route ak4642_intercon[] = {
@@ -262,12 +268,12 @@ static int ak4642_dai_startup(struct snd_pcm_substream *substream,
 		 * This operation came from example code of
 		 * "ASAHI KASEI AK4642" (japanese) manual p94.
 		 */
-		snd_soc_update_bits(codec, SG_SL1, PMMP, PMMP);
-		snd_soc_update_bits(codec, SG_SL1, MGAIN0, MGAIN0);
+		snd_soc_update_bits(codec, SG_SL1, PMMP_BIT, PMMP_BIT);
+		snd_soc_update_bits(codec, SG_SL1, MGAIN0_BIT, MGAIN0_BIT);
 		snd_soc_write(codec, TIMER, ZTM(0x3) | WTM(0x3));
 		snd_soc_write(codec, ALC_CTL1, ALC | LMTH0);
-		snd_soc_update_bits(codec, PW_MGMT1, PMADL, PMADL);
-		snd_soc_update_bits(codec, PW_MGMT3, PMADR, PMADR);
+		snd_soc_update_bits(codec, PW_MGMT1, PMADL_BIT, PMADL_BIT);
+		snd_soc_update_bits(codec, PW_MGMT3, PMADR_BIT, PMADR_BIT);
 	}
 
 	return 0;
@@ -282,8 +288,8 @@ static void ak4642_dai_shutdown(struct snd_pcm_substream *substream,
 	if (is_play) {
 	} else {
 		/* stop stereo input */
-		snd_soc_update_bits(codec, PW_MGMT1, PMADL, 0);
-		snd_soc_update_bits(codec, PW_MGMT3, PMADR, 0);
+		snd_soc_update_bits(codec, PW_MGMT1, PMADL_BIT, 0);
+		snd_soc_update_bits(codec, PW_MGMT3, PMADR_BIT, 0);
 		snd_soc_update_bits(codec, ALC_CTL1, ALC, 0);
 	}
 }
@@ -327,13 +333,13 @@ static int ak4642_dai_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 	u8 data;
 	u8 bcko;
 
-	data = MCKO | PMPLL; /* use MCKO */
+	data = MCKO_BIT | PMPLL_BIT; /* use MCKO */
 	bcko = 0;
 
 	/* set master/slave audio interface */
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBM_CFM:
-		data |= MS;
+		data |= MS_BIT;
 		bcko = BCKO_64;
 		break;
 	case SND_SOC_DAIFMT_CBS_CFS:
@@ -341,7 +347,7 @@ static int ak4642_dai_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 	default:
 		return -EINVAL;
 	}
-	snd_soc_update_bits(codec, PW_MGMT2, MS | MCKO | PMPLL, data);
+	snd_soc_update_bits(codec, PW_MGMT2, MS_BIT | MCKO_BIT | PMPLL_BIT, data);
 	snd_soc_update_bits(codec, MD_CTL1, BCKO_MASK, bcko);
 
 	/* format type */
@@ -426,7 +432,7 @@ static int ak4642_set_bias_level(struct snd_soc_codec *codec,
 		snd_soc_write(codec, PW_MGMT1, 0x00);
 		break;
 	default:
-		snd_soc_update_bits(codec, PW_MGMT1, PMVCM, PMVCM);
+		snd_soc_update_bits(codec, PW_MGMT1, (1 << PMVCM), (1 << PMVCM));
 		break;
 	}
 	codec->dapm.bias_level = level;
-- 
1.7.9.5

