From eb9bf3a00cac594bbfb47f09a8f6640aa366adce Mon Sep 17 00:00:00 2001
From: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
Date: Tue, 18 Jun 2013 10:21:01 +0900
Subject: net: sh_eth: Add data cache support

Signed-off-by: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 drivers/net/sh_eth.c    |   49 ++++++++++++++++++++++++++++++++++++++++++-----
 drivers/net/sh_eth.h    |   19 ++++++++++++++++++
 include/configs/lager.h |    2 +-
 3 files changed, 64 insertions(+), 6 deletions(-)

diff --git a/drivers/net/sh_eth.c b/drivers/net/sh_eth.c
index 68eb517..271f964 100644
--- a/drivers/net/sh_eth.c
+++ b/drivers/net/sh_eth.c
@@ -38,19 +38,41 @@
 #ifndef CONFIG_SH_ETHER_PHY_ADDR
 # error "Please define CONFIG_SH_ETHER_PHY_ADDR"
 #endif
+
+#if !defined(CONFIG_SYS_DCACHE_OFF)
 #ifdef CONFIG_SH_ETHER_CACHE_WRITEBACK
 #if defined(CONFIG_SH)
 #define flush_cache_wback(addr, len)	\
 			dcache_wback_range((u32)addr, (u32)(addr + len - 1))
 #elif defined(CONFIG_ARM)
 #define flush_cache_wback(addr, len)	\
-			flush_dcache_range((u32)addr, (u32)(addr + len - 1))
+			flush_dcache_range((u32)addr, (u32)(addr + len))
 #else
 #error
 #endif
 #else
 #define flush_cache_wback(...)
 #endif
+#ifdef CONFIG_SH_ETHER_CACHE_INVALIDATE
+#if defined(CONFIG_ARM)
+#define invalidate_cache(addr, len)			\
+	{						\
+		u32 line_size = 64, start, end;		\
+							\
+		start = (u32)addr;			\
+		end = start + len;			\
+		start &= ~(line_size - 1);				\
+		end = ((end + line_size - 1) & ~(line_size - 1));	\
+							\
+		invalidate_dcache_range(start, end);	\
+	}
+#else
+#error
+#endif
+#else
+#define invalidate_cache(...)
+#endif
+#endif
 
 #define TIMEOUT_CNT 1000
 
@@ -83,14 +105,20 @@ int sh_eth_send(struct eth_device *dev, void *packet, int len)
 	else
 		port_info->tx_desc_cur->td0 = TD_TACT | TD_TFP;
 
+	flush_cache_wback(port_info->tx_desc_cur, sizeof(struct tx_desc_s));
+
 	/* Restart the transmitter if disabled */
 	if (!(sh_eth_read(eth, EDTRR) & EDTRR_TRNS))
 		sh_eth_write(eth, EDTRR_TRNS, EDTRR);
 
 	/* Wait until packet is transmitted */
 	timeout = TIMEOUT_CNT;
-	while (port_info->tx_desc_cur->td0 & TD_TACT && timeout--)
+	invalidate_cache(port_info->tx_desc_cur, sizeof(struct tx_desc_s));
+	while (port_info->tx_desc_cur->td0 & TD_TACT && timeout--) {
 		udelay(100);
+		invalidate_cache(port_info->tx_desc_cur,
+				 sizeof(struct tx_desc_s));
+	}
 
 	if (timeout < 0) {
 		printf(SHETHER_NAME ": transmit timeout\n");
@@ -114,12 +142,14 @@ int sh_eth_recv(struct eth_device *dev)
 	uchar *packet;
 
 	/* Check if the rx descriptor is ready */
+	invalidate_cache(port_info->rx_desc_cur, sizeof(struct rx_desc_s));
 	if (!(port_info->rx_desc_cur->rd0 & RD_RACT)) {
 		/* Check for errors */
 		if (!(port_info->rx_desc_cur->rd0 & RD_RFE)) {
 			len = port_info->rx_desc_cur->rd1 & 0xffff;
 			packet = (uchar *)
 				ADDR_TO_P2(port_info->rx_desc_cur->rd2);
+			invalidate_cache(packet, len);
 			NetReceive(packet, len);
 		}
 
@@ -128,6 +158,8 @@ int sh_eth_recv(struct eth_device *dev)
 			port_info->rx_desc_cur->rd0 = RD_RACT | RD_RDLE;
 		else
 			port_info->rx_desc_cur->rd0 = RD_RACT;
+		flush_cache_wback(port_info->rx_desc_cur,
+				  sizeof(struct rx_desc_s));
 
 		/* Point to the next descriptor */
 		port_info->rx_desc_cur++;
@@ -258,15 +290,17 @@ static int sh_eth_rx_desc_init(struct sh_eth_dev *eth)
 	 * Allocate rx data buffers. They must be 32 bytes aligned  and in
 	 * P2 area
 	 */
-	port_info->rx_buf_malloc = malloc(NUM_RX_DESC * MAX_BUF_SIZE + 31);
+	port_info->rx_buf_malloc = malloc(
+		NUM_RX_DESC * MAX_BUF_SIZE + RX_BUF_ALIGNE_SIZE - 1);
 	if (!port_info->rx_buf_malloc) {
 		printf(SHETHER_NAME ": malloc failed\n");
 		ret = -ENOMEM;
 		goto err_buf_malloc;
 	}
 
-	tmp_addr = (u32)(((int)port_info->rx_buf_malloc + (32 - 1)) &
-			  ~(32 - 1));
+	tmp_addr = (u32)(((int)port_info->rx_buf_malloc
+			  + (RX_BUF_ALIGNE_SIZE - 1)) &
+			  ~(RX_BUF_ALIGNE_SIZE - 1));
 	port_info->rx_buf_base = (u8 *)ADDR_TO_P2(tmp_addr);
 
 	/* Initialize all descriptors */
@@ -372,8 +406,13 @@ static int sh_eth_config(struct sh_eth_dev *eth, bd_t *bd)
 	struct phy_device *phy;
 
 	/* Configure e-dmac registers */
+#if defined(CONFIG_ARM)
+	sh_eth_write(eth, (sh_eth_read(eth, EDMR) & ~EMDR_DESC_R)
+		     | ( EMDR_DESC_64 | EDMR_EL), EDMR);
+#else
 	sh_eth_write(eth, (sh_eth_read(eth, EDMR) & ~EMDR_DESC_R) | EDMR_EL,
 		     EDMR);
+#endif
 	sh_eth_write(eth, 0, EESIPR);
 	sh_eth_write(eth, 0, TRSCER);
 	sh_eth_write(eth, 0, TFTR);
diff --git a/drivers/net/sh_eth.h b/drivers/net/sh_eth.h
index 4e58d21..31b994d 100644
--- a/drivers/net/sh_eth.h
+++ b/drivers/net/sh_eth.h
@@ -58,7 +58,11 @@
 
 /* The size of the tx descriptor is determined by how much padding is used.
    4, 20, or 52 bytes of padding can be used */
+#if defined(CONFIG_ARM)
+#define TX_DESC_PADDING		52
+#else
 #define TX_DESC_PADDING		4
+#endif
 #define TX_DESC_SIZE		(12 + TX_DESC_PADDING)
 
 /* Tx descriptor. We always use 3 bytes of padding */
@@ -66,7 +70,11 @@ struct tx_desc_s {
 	volatile u32 td0;
 	u32 td1;
 	u32 td2;		/* Buffer start */
+#if defined(CONFIG_ARM)
+	u32 padding[13];	/* aligned cache line size */
+#else
 	u32 padding;
+#endif
 };
 
 /* There is no limitation in the number of rx descriptors */
@@ -74,7 +82,13 @@ struct tx_desc_s {
 
 /* The size of the rx descriptor is determined by how much padding is used.
    4, 20, or 52 bytes of padding can be used */
+#if defined(CONFIG_ARM)
+#define RX_DESC_PADDING		52
+#define RX_BUF_ALIGNE_SIZE	64	/* aligned cache line size */
+#else
 #define RX_DESC_PADDING		4
+#define RX_BUF_ALIGNE_SIZE	32
+#endif
 #define RX_DESC_SIZE		(12 + RX_DESC_PADDING)
 
 /* Rx descriptor. We always use 4 bytes of padding */
@@ -82,7 +96,11 @@ struct rx_desc_s {
 	volatile u32 rd0;
 	volatile u32 rd1;
 	u32 rd2;		/* Buffer start */
+#if defined(CONFIG_ARM)
+	u32 padding[13];	/* aligned cache line size */
+#else
 	u32 padding;
+#endif
 };
 
 struct sh_eth_info {
@@ -329,6 +347,7 @@ enum DMAC_M_BIT {
 	EDMR_EL		= 0x40, /* Litte endian */
 #elif defined(SH_ETH_TYPE_ETHER)
 	EDMR_SRST	= 0x01,
+	EMDR_DESC_64	= 0x20, /* Descriptor size is 64byte */
 	EMDR_DESC_R	= 0x30, /* Descriptor reserve size */
 	EDMR_EL		= 0x40, /* Litte endian */
 #else
diff --git a/include/configs/lager.h b/include/configs/lager.h
index 3529352..566284e 100644
--- a/include/configs/lager.h
+++ b/include/configs/lager.h
@@ -73,7 +73,6 @@
 #define CONFIG_USE_ARCH_MEMSET
 #define CONFIG_USE_ARCH_MEMCPY
 #define CONFIG_TMU_TIMER
-#define CONFIG_SYS_DCACHE_OFF
 
 /* STACK */
 #define CONFIG_SYS_INIT_SP_ADDR		0xE827fffc
@@ -176,6 +175,7 @@
 #define CONFIG_SH_ETHER_PHY_ADDR	0x1
 #define CONFIG_SH_ETHER_PHY_MODE PHY_INTERFACE_MODE_RMII
 #define CONFIG_SH_ETHER_CACHE_WRITEBACK
+#define CONFIG_SH_ETHER_CACHE_INVALIDATE
 #define CONFIG_PHYLIB
 #define CONFIG_PHY_MICREL
 #define CONFIG_BITBANGMII
-- 
1.7.10.4

